-- ==============================================================
-- File generated on Sat Nov 13 15:22:58 +0800 2021
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2018.3 (64-bit)
-- SW Build 2405991 on Thu Dec  6 23:38:27 MST 2018
-- IP Build 2404404 on Fri Dec  7 01:43:56 MST 2018
-- Copyright 1986-2018 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity deal_hist1a_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 12; 
             MEM_SIZE    : integer := 4096
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of deal_hist1a_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111110010000111001000000000000", 
    1 => "00111011111000000100001101100010", 
    2 to 15=> "00000000000000000000000000000000", 
    16 => "00111010101011111010100111111100", 
    17 => "00111100000100010110010111111001", 
    18 => "00111000000001010000111001010000", 
    19 to 255=> "00000000000000000000000000000000", 
    256 => "00111101001101101110001010011011", 
    257 => "00111011110011111001111111010000", 
    258 to 271=> "00000000000000000000000000000000", 
    272 => "00111100011101011100011110011000", 
    273 => "00111110010100000110100000010010", 
    274 => "00111100001011010100001100101111", 
    275 => "00111000110111110010000001100001", 
    276 to 288=> "00000000000000000000000000000000", 
    289 => "00111011110001011110001111001111", 
    290 => "00111101000001010011001001101111", 
    291 => "00111000100011011001100000111100", 
    292 to 528=> "00000000000000000000000000000000", 
    529 => "00111010110100011001011010001011", 
    530 => "00111011000110101010000001010101", 
    531 to 544=> "00000000000000000000000000000000", 
    545 => "00111000011010110001000111000001", 
    546 => "00111110010100110010000000010000", 
    547 => "00111100000011101111110010001000", 
    548 => "00111001000010110001010001111001", 
    549 to 561=> "00000000000000000000000000000000", 
    562 => "00111100001111100110010100101011", 
    563 => "00111101000100010111001000110011", 
    564 => "00111001101100101100000001110110", 
    565 to 801=> "00000000000000000000000000000000", 
    802 => "00111010110011011110010011111011", 
    803 => "00111011000100101001111011111111", 
    804 to 818=> "00000000000000000000000000000000", 
    819 => "00111101011110111100100010011001", 
    820 => "00111100000010101101000001001000", 
    821 => "00111001001100010110110011100100", 
    822 to 834=> "00000000000000000000000000000000", 
    835 => "00111011001110010110111111001110", 
    836 => "00111100100110000100110010010010", 
    837 => "00111001110101100101101110010111", 
    838 to 1075=> "00000000000000000000000000000000", 
    1076 => "00111001111010011000101100100111", 
    1077 => "00111000001011001010001100110111", 
    1078 to 1091=> "00000000000000000000000000000000", 
    1092 => "00111101000001100110100110100111", 
    1093 => "00111011110100011110001111100011", 
    1094 => "00111010000000000111111111010011", 
    1095 to 1107=> "00000000000000000000000000000000", 
    1108 => "00111010101110011110010100111111", 
    1109 => "00111100010100101000000011010110", 
    1110 => "00111010010011110000010111100010", 
    1111 to 1347=> "00000000000000000000000000000000", 
    1348 => "00111001000010000111111011001000", 
    1349 => "00111001100101111100110100100010", 
    1350 => "00111000001011001010110000000101", 
    1351 to 1364=> "00000000000000000000000000000000", 
    1365 => "00111101000011101010100000011111", 
    1366 => "00111011110000000011000010110010", 
    1367 => "00111001000011110010010000100000", 
    1368 to 1380=> "00000000000000000000000000000000", 
    1381 => "00111001100101011000000010010110", 
    1382 => "00111010110100100100000001010100", 
    1383 => "00111001000110011000000011001110", 
    1384 to 1620=> "00000000000000000000000000000000", 
    1621 => "00111000100001110111111001000011", 
    1622 => "00111001001100110001000101000010", 
    1623 to 1637=> "00000000000000000000000000000000", 
    1638 => "00111011100111000110100111011001", 
    1639 => "00111010000100101010110010001101", 
    1640 to 1654=> "00000000000000000000000000000000", 
    1655 => "00111001100010101111111001010100", 
    1656 to 1894=> "00000000000000000000000000000000", 
    1895 => "00111000110101000011100000011101", 
    1896 to 1910=> "00000000000000000000000000000000", 
    1911 => "00111010110001100011001100000000", 
    1912 => "00111000010111100100011101100001", 
    1913 to 1927=> "00000000000000000000000000000000", 
    1928 => "00111000011000100001110110100011", 
    1929 to 2167=> "00000000000000000000000000000000", 
    2168 => "00111001100101100011010011011000", 
    2169 to 2183=> "00000000000000000000000000000000", 
    2184 => "00111010111100101101010110100000", 
    2185 to 2200=> "00000000000000000000000000000000", 
    2201 => "00111000100010111111001111011110", 
    2202 to 2439=> "00000000000000000000000000000000", 
    2440 => "00111001010100100000011000000011", 
    2441 => "00111001001100001001001111111110", 
    2442 to 2456=> "00000000000000000000000000000000", 
    2457 => "00111010101000110001110000100100", 
    2458 => "00111000010100101011001010101011", 
    2459 to 2712=> "00000000000000000000000000000000", 
    2713 => "00111000100010111000010100110111", 
    2714 => "00111001100110001101000011111010", 
    2715 to 2729=> "00000000000000000000000000000000", 
    2730 => "00111001111111000011001111010100", 
    2731 to 4095=> "00000000000000000000000000000000" );

attribute syn_rom_style : string;
attribute syn_rom_style of mem : signal is "select_rom";
attribute ROM_STYLE : string;
attribute ROM_STYLE of mem : signal is "distributed";

begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity deal_hist1a is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 4096;
        AddressWidth : INTEGER := 12);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of deal_hist1a is
    component deal_hist1a_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    deal_hist1a_rom_U :  component deal_hist1a_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


