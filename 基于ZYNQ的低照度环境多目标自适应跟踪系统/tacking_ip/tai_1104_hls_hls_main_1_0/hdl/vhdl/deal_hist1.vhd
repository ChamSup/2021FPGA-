-- ==============================================================
-- File generated on Sat Nov 13 15:22:58 +0800 2021
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2018.3 (64-bit)
-- SW Build 2405991 on Thu Dec  6 23:38:27 MST 2018
-- IP Build 2404404 on Fri Dec  7 01:43:56 MST 2018
-- Copyright 1986-2018 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity deal_hist1_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 12; 
             MEM_SIZE    : integer := 4096
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of deal_hist1_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111011000010010010001011010100", 
    1 to 255=> "00000000000000000000000000000000", 
    256 => "00111100000011001001010101100101", 
    257 => "00111011000001101100101010001010", 
    258 to 271=> "00000000000000000000000000000000", 
    272 => "00111010110110001001111101101001", 
    273 => "00111101110111010011001111010011", 
    274 => "00111001001111111000100001101100", 
    275 to 288=> "00000000000000000000000000000000", 
    289 => "00110111101011101100101000001011", 
    290 => "00111001101101000111001010000101", 
    291 to 528=> "00000000000000000000000000000000", 
    529 => "00111110010101001100000110101001", 
    530 => "00111010010101001100000111000001", 
    531 to 544=> "00000000000000000000000000000000", 
    545 => "00111101011001101001101010111001", 
    546 => "00111110011101000111101011100001", 
    547 => "00111011001010101011000101101111", 
    548 to 561=> "00000000000000000000000000000000", 
    562 => "00111010100101110010101011111111", 
    563 => "00111011010110101001001100110100", 
    564 to 801=> "00000000000000000000000000000000", 
    802 => "00111101001100111101101000000111", 
    803 => "00111011101111100010000100111000", 
    804 to 817=> "00000000000000000000000000000000", 
    818 => "00111100000110001110001101011100", 
    819 => "00111101101101000110010100101101", 
    820 => "00111011110010001110110110011010", 
    821 to 834=> "00000000000000000000000000000000", 
    835 => "00111010011011011110101010111011", 
    836 => "00111101001001111110011101110000", 
    837 => "00110111111111111000100000111000", 
    838 to 1074=> "00000000000000000000000000000000", 
    1075 => "00111011100100100111111101110100", 
    1076 => "00111011010011100011100011011110", 
    1077 to 1090=> "00000000000000000000000000000000", 
    1091 => "00111010100101010100000011000100", 
    1092 => "00111101110111000001110111110011", 
    1093 => "00111011111110100101000000111110", 
    1094 to 1107=> "00000000000000000000000000000000", 
    1108 => "00111001001111110111111110010000", 
    1109 => "00111011000100100000110000000111", 
    1110 to 1347=> "00000000000000000000000000000000", 
    1348 => "00111010000110100101011001101001", 
    1349 => "00111010101110100011100101110111", 
    1350 to 1363=> "00000000000000000000000000000000", 
    1364 => "00111000101001011011011001011100", 
    1365 => "00111100010011011101110000101100", 
    1366 => "00111011110101000111001111100000", 
    1367 => "00111000110010101101110010100111", 
    1368 to 1380=> "00000000000000000000000000000000", 
    1381 => "00111001000111100111101001000011", 
    1382 => "00111010101001000110001110100010", 
    1383 => "00111000111001100010000001110101", 
    1384 to 1620=> "00000000000000000000000000000000", 
    1621 => "00111001100001111100011000111011", 
    1622 => "00111001011001010111011111100001", 
    1623 to 1636=> "00000000000000000000000000000000", 
    1637 => "00111000101000101000100101100000", 
    1638 => "00111011011100100001110011101000", 
    1639 => "00111011101000010101111000110100", 
    1640 => "00111001100011000101000000000101", 
    1641 to 1654=> "00000000000000000000000000000000", 
    1655 => "00111001101110111101001110100011", 
    1656 => "00111010000001001001111000001010", 
    1657 to 1893=> "00000000000000000000000000000000", 
    1894 => "00111001011101111001011000101101", 
    1895 => "00111010000101010101101111100001", 
    1896 to 1909=> "00000000000000000000000000000000", 
    1910 => "00111000000100110001001011111001", 
    1911 => "00111011011010000001000011110110", 
    1912 => "00111011100110110101010010110000", 
    1913 => "00111010010000111110111000011011", 
    1914 to 1927=> "00000000000000000000000000000000", 
    1928 => "00111001101101010001010001100011", 
    1929 => "00111001100011001011001111100001", 
    1930 to 2166=> "00000000000000000000000000000000", 
    2167 => "00111001001100111110101001101101", 
    2168 to 2183=> "00000000000000000000000000000000", 
    2184 => "00111010010101000011111110110011", 
    2185 => "00111000101001011010000110100011", 
    2186 to 2456=> "00000000000000000000000000000000", 
    2457 => "00111000111101110110111111001010", 
    2458 => "00111000111001111011100001111010", 
    2459 to 2473=> "00000000000000000000000000000000", 
    2474 => "00110111111101010100011011101011", 
    2475 to 2729=> "00000000000000000000000000000000", 
    2730 => "00110110110111101010010010110101", 
    2731 to 4095=> "00000000000000000000000000000000" );

attribute syn_rom_style : string;
attribute syn_rom_style of mem : signal is "select_rom";
attribute ROM_STYLE : string;
attribute ROM_STYLE of mem : signal is "distributed";

begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity deal_hist1 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 4096;
        AddressWidth : INTEGER := 12);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of deal_hist1 is
    component deal_hist1_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    deal_hist1_rom_U :  component deal_hist1_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


